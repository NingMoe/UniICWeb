using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Newtonsoft.Json;
using UniWebLib;
using UniStruct;
using System.Xml;

public partial class DevWeb_Ajax_Code_reserve : UniClientPage
{
    protected void Page_Load(object sender, EventArgs e)
    {
        base.LoadPage();
        DateTime start = ConvertTime(Convert.ToInt64(Request["start"]));
        DateTime end = ConvertTime(Convert.ToInt64(Request["end"]));

        List<dwResv> resvs = new List<dwResv>();
                REQUESTCODE uResponse = REQUESTCODE.EXECUTE_FAIL;
                DEVLONGRESVSTATREQ vrGet = new DEVLONGRESVSTATREQ();
                vrGet.dwGetType = (uint)DEVRESVSTATREQ.DWGETTYPE.DEVRESVSTAT_DEVID;
                UNIDEVICE dev = (UNIDEVICE)Session["CUR_DEV"];
                vrGet.dwClassKind = (uint)UNIDEVCLS.DWKIND.CLSKIND_COMPUTER;
                vrGet.szKey = dev.dwDevID.ToString();
                vrGet.dwStartDate = Convert.ToUInt32(start.ToString("yyyyMMdd"));
                vrGet.dwEndDate = Convert.ToUInt32( end.ToString("yyyyMMdd"));
                vrGet.dwResvPurpose = (uint)UNIRESERVE.DWPURPOSE.USEFOR_RESEACH;
                DEVLONGRESVSTAT[] vtResult;
        uResponse = m_Request.Device.GetDevLongResvStat(vrGet, out vtResult);
        if (uResponse == REQUESTCODE.EXECUTE_SUCCESS && vtResult != null && vtResult.Length > 0)
        {
            DEVRESVTIME[] resvTbl = vtResult[0].szResvInfo;
            for (int i = 0; i < resvTbl.Length; i++)
			{
                dwResv resv = new dwResv();
                resv.id = resvTbl[i].dwResvID.ToString();
                resv.title = "";
                resv.start = ConvertDate(resvTbl[i].dwBegin.ToString());
                resv.end = ConvertDate(resvTbl[i].dwEnd.ToString());
                resvs.Add(resv);
			}
        }
        Response.ContentType = "application/Json";
        Response.Write(JsonConvert.SerializeObject(resvs));

    }

    private string ConvertDate(string p)
    {
        string y = p.Substring(0, 4);
        string m = p.Substring(4, 2);
        string d = p.Substring(6, 2);
        return y+"-"+m+"-"+d;
    }

    private long MilliTimeStamp(DateTime TheDate)
    {
        DateTime d1 = new DateTime(1970, 1, 1);
        DateTime d2 = TheDate.ToUniversalTime();
        TimeSpan ts = new TimeSpan(d2.Ticks - d1.Ticks);

        return (long)ts.TotalMilliseconds;
    }
    private DateTime ConvertTime(long milliTime)
    {
        long timeTricks = new DateTime(1970, 1, 1).Ticks + milliTime * 10000000 + TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours * 3600 * (long)10000000;
        return new DateTime(timeTricks);
    }
}
class dwResv
{
    public string id;
    public string title;
    public string start;
    public string end;
    public string color;
}